--- cargo profiles

building the code may have different profiles for different purposes
by default we have

>> cargo build [<- dev profile]
>> cargo build --release [<- release profile]


but we can have different ones, both of them differ on the opt-level which is
the amount of optimizations the code goes through, this value oscilates
between 0 and 3. More optimization = slower build.

a full list is here https://doc.rust-lang.org/cargo <- of differnet features.


--- publishing crates

to publish you gotta make good docs, /// <- documentaiton comments support
markdown.

when we run cargo doc, this will run rustdoc tool and put the generated HTML
at the target/doc dir

cargo doc --open <-- wil create and open the doc in a browser.

common sections for docs.
panics <- when the code could panic
errors <- descriptions of the errors
safely <- if the function is unsafe to be called.


cargo tests also capture this comments especifically the examples and runs
them and verify this examples run properly.
this are under the examples section and capture with the ``` <- mark

# Examples

```
... examples
```

//! comments are intended to exlain the purpose of the code rather than givin
use examples they support markdown as well, they are usually placed at the 
lib.rs


-- the structure of the API

we dont need to re organize everything even if we have a type in a deep down
tree of files and folders we can re export it so its easy for the user using
our api to get access to it

Re exporting means we will use the pub use keywords

Re exporting will make the public structure different from the private one.

Re exporting takes a public item in one location and makes it public in another
location as if it were defined in the new location instead.


suppose we have on our lib two mods, A and B
inside A we define 1 and 2 and in B we define 3

someone using our code will have to do 

use mod::A::1;
use mod::B:3;

this means they gotta know the two modules and then the elements, which they 
may not if they dont go through the docs first.

what we can do at our lib.rs

is do (at the top)

pub use self::A::1;
pub use self::A::2;
pub use self::B::3;


cargo doc will capture this at the re-exports section and our user may do

use mod::1;
use mod::3;

easssier.

-- metadata to the crate

the package name can be set at the Cargo.toml file under the [package]
section

name = "test1234"

but also we gotta define a description and a license, the license needs an 
identifier like MIT, one can check them out at spdx.org/licenses

we can add many licences, by using the OR keyword

license = "MIT OR Apache-2.0"

e.g.

[package]
name = "test"
version = "0.1.0"
authors = ["joe doe <joe@doe.me"]
description = "blah blah blah"
license = "MIT OR Apache-2.0"
edition = "2020"

we may publish the crate by doing cargo publish, the publish is permanent and
the code uploaded can never be deleated

although we can not remove a version we can "yank" it meaning we dont make it
usable for new projects but keeps it for those that already use it.

>> cargo yank --vers 1.0.1

if we do cargo yank --vers 1.0.1 --undo 1.0.1 we can undo de yank.


-- cargo workspace

allows us to split a package into multiple library crates, workspaces lets the
developer manage multiple related packages, all this packages will share the
same Cargo.lock 

there are multiple ways to define a workspace project ref to the workspace
folder

the important thing here is we need a main folder which is the workspace
place a Cargo.toml with the section [workspace] and inside that section
the members which is a list of all the other sub projects, this projects have
to be generated one by one

and using cargo respectively
if we had

members = [
 "1"
]

inside the workspace we gotta do cargo cargo new "1" for this binary crate but
lets imagine 1 uses 2 and 3 which are libraries then we have to do

members = [
 "1",
 "2"
]

cargo new "2" --lib

and then the same for three
remember now that that 1 dependen on 2 and 3, so on its own cargo.toml we gotta
define the depnedencies as

[dependencies]
2 = {path = "../2"}


the workspace is all build together, so at the top of the workspace
we do 
 cargo build

if we want to run the binary crate we must do

cargo run -p 1


each crate inside the workspace must define its own dependencies, even
if two crates use the same one! Rust will work this out and place the same with
no repetition at the top level Cargo.lock

cargo tests at the top level will run the tests of all child crates.
but we can be specific by doing

cargo tets -p 1 for example which will run only the tests of crate 1

publishing a workspace is done by publishing each crate separately we can not
do it all at once.


-- cargo install

cargo install

allows developers to install BINARY crates other developesr have created
locally

cargo is customizable and allows users to run their own commands if we have 
a cargo-something bin installed at the path, cargo lets us run it as
> cargo something

cargo --list displays all custom commands.
