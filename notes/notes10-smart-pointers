--- Smart Pointers


smart pointers are similar to pointers but have extra capabilities.

eg. Reference counting 

reference counting allows many members to be owners of a piece of data, when
all the owners have stoped using the data it is cleaned up.

reference â‰  smart pointers

references are pointers that borrow data
smart pointers own the data they point to.

smart pointers are usually implmented as structs that implement the 
Deref and Drop tratis.

The deref trait allows an instance of the smart pointer struct to behave like
a ref.

the drop trait allows one to specify the behavior of the struct when it goes
out of scope.

some SP (smart pointers) examples

Box<T> -> allocates values on the heap
Rc<T> -> a reference counting that allows multiple ownership
Ref<T> RefMut<T> both accessed through RefCell<T> a type that enforces
borrowing rules at runtime instead of compile time.

other examples: Vec<T> and String


-- Box<T>

easy way to store stuff at the heap rathr than the stack, this is achieved
by sending the reference to the box into the stack while keeping the data at
the heap.

Boxes do not have performance overhead, besides the storing of data

common usages:

1. when you have a type which size can not be known at compile time and u need
   to use a value of that type in a ctx where the exact size is required.

2. when large data is handled and the ownership must be transferred but we
    don't want to copy it.

3. When you want to own a value and you care only if the type implements a 
   trait rather than the type itself.


Box<T> to store data on the heap

fn main() {
    let b = Box::new(5);
    println!("b = {}", b);
}

the deallocation of the resources is similar as it would happen if the value
would have been on the stack in the first place, when b goes out of scope
the stack references is deallocated as the data stored in the stack.



Enabling recursive types -> allows to define types at places we wouldn't be
able.

rust needs to know the exact amount of space a type would take up. But
recursive types, this scenario happens when a value can have as part of itself
a value of the same type, this could go inifinitely and rust would panic. 

To this situation we can insert a box because boxes have a known size and in 
this way we have a recursive type


eg.

enum List {
    // cons constructs a new pair from its two args
    // commonly a single value and another pair
    // i32, List
    Cons(i32, List),
    Nil
}

its like creating a list where the first value is the number and the following
is a structure that holds the next value, and the last one will be Nil meaning
that there are no more items, a way to create a collection is to recursively
call Cons


use crate::List::{Cons, Nil};

fn main(){
    let list = Cons(1, Cons(2, Cons(3, Nil))):
}

this will not explode as rust does not know what this cons type syze is
and will tell that List has infinite size!

so to fix this we need to tell the compiler that List will hold this Cons
that has an i32 and a reference to another List, this is where Box comes to
play as it is a reference.

enum List {
    Cons(i32, Box<List>),
    Nil
}

use crate::List::{Cons, Nil};

fn main() {
    let list = Cons (1,
        Box::new(Cons(2,
            Box::new(Cons(3,
                Box::new(Nil))))));
}

Great this compiles as now the Cons now holds a value and a reference to an 
instance of the enum which is cool as rust knows the size of refence.

-- Deref trait

allows us to make smart pointers be treated as normal references, writing code
that works with references and uses it with SP too.


common usage of deferencing

fn main() {

let a = 5;
let b = &a;

assert_eq!(5, a);
// notice we have to deference the variable to have access to the value
assert_eq!(5, *b);

}

we could use box as well here

let a = 5;
let b = Box::new(a);

assert_eq!(5, a);
// even if its a box reference it allows deferencing so we can evaluate the
// value
assert_eq!(5, *b);

smart pointers behave differently to normal pointers 

struct MyBox<T>(T);

impl <T> MyBox<T> {
    fn new(x: T) -> MyBox<T> {
        MyBox(x)
    }
}


even if we replace the previous Box with ours the code wont compile as we
havent implemented the Deref trait therefor it wont be able to deference the 
value.


so

use std::ops::Deref;

impl<T> Deref for MyBox<T> {
    // defines an associated type for the deref trait
    type Target = T;
    // returns a ref to the value, if it would return the plain value then it 
    // the ownership of the value would be removed from self. We dont want
    // to take the value out of the Box, we just wanna know whats inside.
    fn deref(&self) -> &T {
        &self.0
    }
}


here we are implmenting the trait which requires us to implement the deref 
method.

without the deref trait we would only be able to deference only & references.
The deref trait gives the compiler the capability to take a value of any type
that implements the defer trait and call its deref method to get the & reference
that knows how to dereference

Deref Coercions -> this is performed by rust when arguments are passed to f(x)
and methods. this converts a ref to a type that implements the Deref trait
into a ref to a type that Deref can convert the original type into.

ref -> type with Deref -> ref -> type that Deref can convert the original type 

for example

fn hello(name: &str) {
    // the standard lib has a inmpl of Deref on String that returns
    // the stirng slice, here it calls the deref again to turn the 
    // &string into a &str which amtches the hello function call
    println!("Hello, {}!", name);
}

fn main() {
    // m is a reference to a string stored at the heap
    let m = MyBox::new(String::from("Rust"));
    // we pass a &MyBox<String> to the function
    hello(&m)
    // rust turns it into a &String by calling the deref method
    
}   

if deref wasnt implemented we would have had to do this

// this would deference the stirng at the box due to the *
// we have the String now we obtain a slice of it so we can use it
// then we pass a reference of the slice ot the function
hello(&(*m)[..]);

deref coercion simplifis all of this for us by calling the deref methods 
when needed rust understands that we want to pass the reference to the value
inside the box, but it knows this thanks to the deref trait and method 
implementaitons. rust will call the deref method as many times as needed in
order to get a reference that matches the parameter type, this is of course
resolved at compile time

overriding the * behavior may be used for mutable references as well, so far
we did this with immutable references, this can be done by implementing the 
DerefMut trait to override the * operator.



- cases where deref coercion is used by rust

1. from &T to &U when T: Deref<Target=U> (case of box and string)
2. from &mut T to &mut U when T: DerefMut<Target=U> (similar but mutable)
3. From &mut T to &U when T: Deref<Target=U> (mutable can be coerced into 
immutable but not the other way around, breaks borrowing rules)

-- Drop trait

This allows us to change the behaviour when a SP is going out of scope
Box implements Drop to deallocate the space on the heap that the box points to

Drop is usually done automaticall when a SP goes out of scope, some languages
dont do this and may cause a memory leak that will crash and burn the code.

Drop traits needs the implementation of the drop method, which takes a mut ref
to self

e.g.

struct CustomSP {
    data: String
}

impl Drop for CustomSP {
    fn drop(&mut self) {
        println!("Dropping CustomSP with data {}", self.data);
    }
}

fn main () {
    let c  = CustomSP {data: String::from("my SP"));
    let d = CustomSP {data: String:from("Another SP"));
    println!("Custom SPs created");
}


dropping early (before going out of scope) might be done with the drop
function from 

>> std::mem::drop

we cannot call the drop method from the CustomSP as rust will complain that
destructors calls are not explicitly allowed, this is because when the 
CustomSP actually goes out of scope Rust would be freeing mem that was already
freed (double free error)

if we had something like

use std::mem::drop;

-- Rc<T> Reference Counted Smart Pointer

let c = CustomSP { data: String::from("Rust")};
drop(c);

