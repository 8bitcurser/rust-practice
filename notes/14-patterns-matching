---- Patterns

Patterns => { literals || destructured arrays || enums || tuples || structs ||
              variables || wildcards || placeholders }

commonly used in match expressions

match VALUE {
    PATT => EXPRESSION
}

if let PATT = val { EXPRESSION } [else {EXPR}] optional or [else if VAL {EXPR}] or 
[else if let PATT {EXPRE}]


match is more exhaustive than if let, meaning if let can not contemplate all
cases while match requires the developer to handle all data.


while let PATT, is a structure that runs X something while the pattern is 
matched

e.g 

let mt stack = Vec::new();
stack.push(1);
stack.push(2);

while let Some(top) = stack.pop() {
    println!("{}", top);
}

for loops are also using patterns

for x in y => for pattern in iterator

other e.g.

let v = vec!['a', 'b', 'c'];

// (idx, val) is the pattern
for (idx, val) in v.iter().enumerate() {
    println!("{} is at idx", idx, val);
}


variable assignment

let x = 5 => let PATTERN = EXPRESSION

a better e.g

let (x, y, z) = (1, 2, 3);

but 
// wont compile as the patternt doesnt match the expresion the tuple can not
// be decompressed in two as the tuple has three values
// a solution would be let (x, y, _) = (1, 2, 3);
// we ignore the third, we could also use .. for this

let (x, y) = (1, 2, 3);

functions also use patterns

fn foo(x: i32) {}

// x is the pattern


--- Refutability

its the quality of a pattern, it can either be irrefutable meaning it may not
match fully or refutable when the matchability must  be exact.

the assingment of let x = 5 is irrefutable it will match any value


if let Some(x) = blah is a refutable it will not match in certain scenarios 

--- types of matching


-- match literals

let x = 1 {
    1 => println!("1"),
    2 => println!("2"),
    _ => println!("whatever")
}

prints 1


--- matching named variables

let x = Some(5);
let y = 10;

match x {
    Some(50) => println!("50"),
    Some(y) => println!("Matched y {}", y);
    _ => println!("any")
}

// this prints some(5) and 10
println!("x {}, y {}", x, y);

x is not inside the match pattern so it is not shadowed and exits in the outer
the inner y dies when the scope of match finishes and returns to the outer one.

this will print the second statement the one of Some(y), as it will print
whatever is wrapped in a Some, the first doesn't match and this one does


--- multi patterns [OR]


let x = 1;

match x {
    1 | 2 => println!("one or two"),
    _ => println!("any")
}


--- matching ranges of values


let x = 5;

match x {
    1 ... 5 => println!("some num from 1 to 5");
    _ => println!("any")
}

(ranges only work for char and numbers)


let x = 'c';

match x {
   'a' ... 'j' => println!("first asciis"),
   'k' ... 'z' => println!("late asciis")
}


---- patterns to destructure


--- structs


struct Point {
    x: i32,
    y: i32
}


fn main() {
    let p = Point {x: 0, y: 7};
    let Point {x: a, y: b} = p;
    assert_eq!(0, a);
    assert_eq!(7, b);
}


/// a shorthand

fn main {
    let p = Point {x: 0, y: 7};
    let Point {x, y} = p;
    assert_eq!(0, x);
    assert_eq!(7, y);
}

using match


fn main {
    let p = Point {x: 0, y: 7};
    match p {
        Point {x, y: 0} => println!("ON the x axis"),
        Point {x: 0, y} => println!("On the Y axis"),
        Point {x, y} => println!("on neither axis!")
    }
    // will print the second statement
}


--- enums

enum Message {
    Quit,
    Move {x: i32, y: i32},
    Write(String),
    ChangeColor(i32, i32, i32)
}

fn main() {
    let msg = Message::ChangeColor(0, 160, 255);
    match msg {
        // this wont match we didnt set the Quit variant on msg
        // quit also doesnt have any values to destructure so we can match
        // the variant literally
        Message::Quit => {
            println!("The Quit variant has no data to destructure");
        },
        // we have nothing to desstructure at the Move variant so nothing
        // will be matched
        Message::Move {x, y} => {
            println!("Move in the x dir {} and in the Y dir {}", x, y);
        },
        // We didnt set a message at the Write variant so it wont match
        Message::Write(text) => {
            println!("Text message: {}", text);
        },
        // We did set the color and we can destructure it so this message will
        // match
        Message::ChangeColor(r, g, b) => {
            println!("Change color to red {}, green {}, blue {}", r, g, b);
        }
    }

}


--- nested structs and enums

enum Color {
    Rgb(i32, i32, i32),
    Hsv(i32, i32, i32)
}

enum Message {
    Quit,
    Move {x: i32, y: i32},
    Write(String),
    ChangeColor(i32, i32, i32)
}


fn main() {
    let msg = Message::ChangeColor(Color::Hsv(0, 160, 255));

    match msg {
        Message::ChangeColor(Color::Rgb(r, g, b)) => {
            println!("color: r{}, g{}, b{}", r, g, b)
        },
        Message::ChangeColor(Color::Hsv(h, s, v)) => {
            println!("color: h{}, s{}, v{}");
        }
        _ => ()
    }
}


--- destructuring structs and tuples

let ((feet, inches), Point {x, y}) = ((3, 10), Point {x: 3, y: 10});

this pattern lets mix things up two complex structures are destructured in 
variables that we can use


---- Ignoring pattern

// we ignore the first parameter.
fn foo(_: i32, y: i32) {
    println!("This code only uses the y parameter: {}", y);
}

fn main() {
    foo(3, 4);
}


let mut setting_val = Some(5);
let new_setting_val = Some(10);

match (setting_val, new_setting_val) {
    (Some(_), Some(_)) => {
        println!("cant overwrite an existing customized value");
    },
    _ => {
        setting_val = new_setting_val;
    }
}

// even ignore some inside a tuple

let numbers = (2, 4, 8, 16, 32);

match numbers {
    (first, _, third, _, fifth) => {
        println!("Some numbers: {}, {}, {}", first, third, fifth);
    }
}


--- ignoring to tame the compiler

by prefixing a variable with an underscore we can tell the compiler not to 
worry about it if its not being used. 

let _x: 5;

the diff between _<val name> and just _ is that _<val name> is binded to the 
value while _ doesnt bind to anything


--- ignoing the remainder

the .. pattern allows one to ignore the excess we dont need e.g.


struct Point {
    x: i32, 
    y: i32,
    z: i32
}

let origin = Point {x: 0, y: 0, z: 0};

// we ignore the rest of the point as we only care only for x
match origin {
    Point { x, .. } => println!("x is {}", x);
}


let numbers = (2, 4, 8, 16, 32);

match numbers {
    (first, .., last) => {
        println!("{} {}", first, last);
    }
}

// or

this is ambigious and wont compile, how would rust determine after the first ..
which is the "second" number.
match numbers {
    (.., second, ..) => {
        println!("some nums {}", second);
    }
}

---- Match guard

its adding an if to the pattern for e.g.

let num = Some(4);

match num {
    // this will be printed as the inner value is lesser than 5
    Some(x) if x < 5 => println!("Minor to 5!"),
    // this would also match but the previous already did.
    Some(x) => println!("{}", x),
    None => (),
}

we may use the or operator as well with the guard.


let x = 4;
let y = false;

match x {
    // this wont be printed because the guard prevents this.
    4 | 5 | 6 if y => println!("yes"),
    _ => println!("no")
}


---- Bindings


the @ operator lets the developer create a variable that holds a value while 
also testing the value as to check a pattern.


enum Message {
    Hello {id: i32},
}

let msg = Message::Hello { id: 5 };

match msg {
    Message::Hello {id: id_var @ 3...7} => {
        println!("Found and id range: {}", id_var);
    },
    Message::Hello {id: 10...12 } => {
        pritnln!("The id is on another range :(");
    },
    Message::Hello {id} => {
        pritnln!("Found some weird id {}", id);
    }
}



