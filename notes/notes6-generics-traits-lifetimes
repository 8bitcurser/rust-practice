---- Generics

Generics are used to avoid duplication of logic for different types, for e.g.
Vec<T>, Result<T, E>, Option<T>, HashMap<K, V> these are all generics.

Traits are associated to generics by providing behavior to them. 

e.g a generic function that finds the largest either number or character.

with a normal function I would have to declare two functions that do the same
thing but on different input types, with generics it can be resolved like this.

# We need to delcare the type before we use it as a parameter and return type
# thats why we add <T> to the function signature. Any letter would do its just
# convention to use T.
fn largest<T>(list: &[T]) -> T {
    let mut largest = list[0];
    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }
    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];
    let result = largest(&number_list);
    println!("The largest number is {}", result);
    let char_list = vec!['y', 'm', 'a', 'q'];
    let result = largest(&char_list);
    println!("The largest char is {}", result);
}



wayyy more simple one function that covers both scenarios. 


Generic structs

# same as with functions we need to declare T at the struct signature in
# order to use it.
struct Pointer<T> {
    x: T,
    y: T
}

# as T is one type we can not mix types and expect the struct to work fine with
# it, we cannot do Point {x:5, y:1.0} T is one thing or the other.
fn main() {
    let integer = Point { x: 5, y: 10 };
    let float = Point { x: 1.0, y: 4.0 };
}



# if the pointer struct would need more than one type we could do

struct Pointer<T, U> {
    x: T,
    y: U
}

fn main() {
    let both_integer = Point{x: 5, y: 10};
    let both_float = Point{x: 1.0, y: 4.0};
    let mix = Point{x:5, y:1.0};
}

enums may have types as well, Result and Option and cases of those

enum Option<T> {
    Some(T),
    None,
}

enum Reult<T, E>{
    Ok(T),
    Err(E)
}


# methods may also hold generic types

struct Point<T> {
    x: T,
    y: T
}

# we need to declare T after impl so we can specify that we are implementing
# methods on the type Point<T>. this way rust identifies that the <T> at
# Point<T> means a generic Type and not a concrete one. This means we can have
# specific methods for each type that receives Point
# e.g
# impl Point<f32> {
#   fn distance_from_origin(&self) -> f32 {
#       (self.x.powi(2) + self.y.powi(2)).sqrt()
#    }
# }
# this method will only apply for f32 Points





impl<T> Point<T> {
    fn x(&self) -> &T {
        &self.x
    }
}

fn main() {
    let p = Point { x: 5, y: 10};
    println!("p.x = {}", p.x);

}


## The signature of a struct may define different generic types as those
## used on its methods


struct Point<T, U> {
    x: T,
    y: U
}

impl<T, U> Point<T, U> {
    fn mixup<V, W> (self, other: Point<V, W>) -> Point<T, W> {
        Point {
            x: self.x,
            y: other.y
        }
    }
}


fn main() {
    let p1 = Point {x: 5, y: 10.4};
    let p2 = Point {x: "Hello", y: 'c'};
    let p3 = p1.mixup(p2);
    println!("p3.x = {}, p3.y = {}", p3.x, p3.y);
}

this will 
    >> print p3.x = 5, p3.6 = c

using generics doesnt generate performance cost because the compiler looks all
around the code finding where the generic type  was used and generates a
specific code for each one of those generics for each type meaning i have 
some 

struc gen<T> {
    // saraza
}

and around the code is used with f32 and i64 the compiler will create
gen_f32 and gen_i64 at compile time and use them accordingly as not to loose
performance. This is called monomorphization.

--- Traits
lets the compiler know a functionality a type has and that can be shared.

Used to define shared behaviours in an abstract way.

Behavior is commonly associated to the methods a type has. Traits are a way
to group methods as to define a particular behavior. 

They work similar to interfaces, example C/Java/C++/C#

e.g.

pub trait Summary {
    # a trait may have more than one method
    fn summarize(&self) -> String;
}


If a type implements this trait it will have to make an implementation of the
methods inside the trait.


pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String
}

impl Summary for NewsArticle {
    fn summarize(&self) -> String {
        format!("{}, by {} ({})", self.headline, self.author, self.location);
    }
}


# New article implements the Summary trait and needs to implement a behavior for
# the summarize method.


pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool
}

impl Summary for Tweet {
    fn summarize(&self) -> String {
        format!("{}: {}", self.username, sel.content);
    }
}

# usage

let tweet = Tweet {
    usernmae: String::from("horse_ebooks"),
    content: String::from("of course as you probably already know, people"),
    reply: false,
    retweet: false
};

println!("1 new tweet: {}", tweet.summarize());


# both implement the trait and method but in a different way.

we can implement traits to types that our local to our crate
meaning we can not implement an external trait on an external type. 
But we can implement an external trait on a local type or a local trait on an
external type.

This restriction is called coherent or orphan rule.


traits may have a default behavior

pub trait Summary {
    fn summarize(&self) -> String {
        String::from("(Read More...)");
    }
}

as to use the default behaviour the type should implement the trait this way

impl Summary for NewsArticle {};


trait methods can call other trait methods

pub trait Summary {
    fn summarize_author(&self) -> String;
    fn summarize(&self) -> String {
        format!("(Read more from {}...)", self.summarize_author())
    }
}


# this extends the functionality of method traits and allows a more complex
# development

impl Trait syntax is syntax sugar for something longer:

this is called trait bound: 

pub fn notify<T: Summary>(item: T) {
    println!("Breaking news! {}, item.summarize());
}



--- Trait as param

we can use traits to write functions that accept different types.


pub fn notify(item: impl Summary) {
    println!("Breaking news! {}", item.summarize());
}

this function means we have a function that has a parameter item which is of 
any type that has implemented the Summary trait and at its definition calls the
summarize method from that parameter. As we called the summarize method we can
call. If the method is called with a type that has not implemented the Summary
trait it wont compile

--- Trait bound

pub fn notify<T: Summary>(item: T){
    println!("Breaking news! {}", item.summarize());
}

this functions are equivalent the whole impl Summary is syntax sugar for this
type of function signature.

This syntax is called trait bound and its commonly used when we need a more 
specific case, the impl Trait syntax is for simple cases.


for e.g.

pub fn notify(item1: impl Summary, item2: impl Summary){}

could be rewritten to this which is more concise

pub fn notify<T: Summary>(item1: T, item2: T) {}


if item 1 and 2 shoudl have the same type trait bound would be the appropiate
syntax, but! if they would be from different types we should use the impl
syntax.


we can even specify that a type may need to implement more than 1 trait at the
same time this is done with the + symbol

pub fn notify(item: impl Summary + Display) {}

or 

pub fn notify<T: Summary + Display>(item: T) {}


but this may get quickly too verbose and unclear to read.

like this scenario:

    fn some_function<T: Display + Clone, U: Clone + Debug>(t: T, u: U) -> i32{}

so Rust has the where clause

    fn some_function<T, U>(t: T, u: U) -> i32 {
        where T: Display + Clone,
              U: Clone + Debug
    }


this is way more readable


the impl Trait syntax may be used on the return, so the thing we are returning
MUST have the trait specified implemented


fn returns_summarizable() -> impl Summary {
    Tweet {
        username: String::from("horse_ebooks"),
        content: String::from("Of course, as you probably already know"),
        reply: false,
        retweet: false
    }
    
}

The type doesnt matter as long the trait is implemented. Useful for iterators
this syntax may only be used for returning one type at a time. 
The code can not return two different types like in this case

fn returns_summarizable(switch: bool) -> impl Summary {
    if switch {
        NewsArticle {...}
    } else {
        Tweet {...}
    }    
}


this will generate a compile error as the function can return two different 
types even if both implement the Summary trait.

--- the largest method
that we specified previously was throwing an error because the generic type
didnt have the partial order trait implemented and couldn't compare between
values.

so the signature should be modified to 

fn largest<T: PartialOrd + Copy>(list: &[T]) -> T {}

we need both this traits because i32 and char are the types that we are
comparing with this function and now that we specified that the function
hold a generic type the list of values passed is not going to the stack but
to the heap and to be able to copy a value from the list to a variable which
we return we need the Copy trait implemented. Both i32 and char which are
commonly stored in the stack have both implemented so if we specify the tratis
rust know knows how to handle the comparisson and the copying to a variable.

But maybe we dont wanna restrain the function to be used only to those types
that have the Copy type implemented so we could change the Copy to the Clone.

The clone is also implemented but it takes more processing time as it allocates
more space in the heap, it would be inconvenient for larg sets of numbers,
chars.


another simpler way would be to instead return the reference to the largest
value instead of returning it, that way we can remove the Copy Trati or clone
Trait from the declaration.


e.g.

use std::fmt::Display;

struct Pair<T>{
    x: T,
    y: T
}

impl<T> Pair<T> {
    fn new(x: T, y: T) -> Self {
        Self {
            x,
            y
        }
    }
}


impl<T: Display + PartialOrd> Pair<T>{
    fn cmp_display(&self) {
        if self.x >= self.y {
            println!("The largest is {}", self.x);
        } else {
            println!("The largest is {}", self.y);
        }
    ]
}


### the  method (cmp_display) works only for those generic types that have
implemented the Display and Partial ord traits upon the struct creation.

### the new method works for any type but the other only for those that allow
comparison and printing.

### This is great we can implement the struct with whatever but unlock those
methods only when the type is good enough for the function.

--- blanket implementation

blanket implementations are implementations of a trait on whatever type that 
satifies a particular trait bound.

impl <T: Display> ToString for T {

}

this means that ToString will be implemented on any T type that impements the
Dispaly Trait.

This Blanket implementation allows us to have the ToString trait on whichever
Type applies this constraint without having to manually write every single case.

Blanket implementations == Implementors.


---- Lifetimes


