Rust borrows many things from functional

Closures <- f(x) construct-ish  that can be stored in a variable
Iterators <- how we process a series of elements
enums, pattern matching.

the why is clear, the performance. This two feature are extremely fast and give
rust steroids.


--- Closures

anonymous f(x) that can be stored in a variable or can be passed as args to
other f(x).

we can create a clousure at an X scope and evaluate it to a Y scope

clousures can capture values from the scope in which they are defined, which
f(x) cant do

all this increases the felixibility and power of using functions.

e.g.

// num is the parameter
let expensive_closure = |num| {
    println!("Calculating slowwwwly...");
    thread::sleep(Duration::from_secs(2));
    num
};

// puting all between curly braces is optional if less than one line is needed
for the clousure

this means expensive_closure holds the definition of an anonoymous function not
the result value from it.

calling a closure is the same as a function.

-- clousures type inference and annotations

fn needs the return type and parameters type because they are part of an
explicit interface exposed to the users, so we all have to agree on what a
function takes and what it returns, with clousures this are hidden, stored
in variables, without naming or exposure. 

Usually short and relevant for a narrow context, at this small context the 
compiler can infer what type it will receive and return. we could annotate 
the types if we want to increase the explicitness and readability but its 
up to one.

|num: u32| -> u32 {...}

if we call the clousure twice one with a string and then with an int we gonna
get an error as the compiler for the first call infered the clousue takes
strings not ints.

--- store clousures using gen parameters and the Fn traits

a GREAT pattern to store data at the cache is called

"memoization or lazy evaluation"

the clousure is stored at a struct as well as the resulting value of calling
the clousure, this way we exe the clousure only upon needing the resulting 
value, sending the return value to the cache. 
-pretty amazing-

but to do so we need to specify the type of the clouse cause structs defs
must have their types specified on each field, thats why generic types come
to play.

this way two clousures even if with the same signature they will be considered
different. Clousures can be added to enums or functions paramenters but to 
do so we need generics and trait bounds, specificially the Fn one.

< The Fn trait comes from the std lib and all clousures implement this one or
FnMut and FnOnce>

struct Cacher<T>
    where T: Fn(u32) -> u32
{
    calculation: T,
    value: Option<u32>
}

note that we need to specify the type to Fn of the parameter passed and the
return.

any clousure we want to store at the cacher must take one argument that is a 
u32 and must return one u32 value


<f(x) can implement all three of the Fn traits, if the thing we want to do
doesn't require capturing a value from the env maybe we are better of with a
fn rather than a closure>

before executing the clousure value will be none. when the code asks for the
result it will execute the clousure and store the result within a "Some" variant
at the value field, but if we call the value again instead of re running it
will provide the value stored.

to do all this wizardy we need to write it.

impl<T> Cacher<T>
    where T: Fn(u32) -> u32 {
    fn new(calculation: T) -> Cacher<T> {
        Cacher {
            calculation,
            value: None
        }
    }

    fn value(&mut self, arg: u32) -> u32 {
        match self.value {
            Some(v) => v,
            None => {
                let v = (self.calculation)(arg);
                self.value = Some(v);
                v
            }
        }
    }
}


we dont want this fields to change thats why we make them private and manage
them internally.


so the cool thing here is when we pass the clousue that meets our requirements
we store it with the new method and set value to none, then when we need the
value, we first check if we already have it set if we do we return, if not we
call the clousure and set the value.

and this would be called like this

let mut expensive_result = Cacher::new(|num| {
    println!("calculating slowly...");
    thread::sleep(Duration::from_secs(2));
    num
});

// as is the first it will call the clousue and store the value
expensive_result.value(intensity);
// here it will just return it.
expensive_result.value(intensity);


the problem with this implementation is that cacher assumes args is always the
same

-- clousures know their env


fn main() {
    let x = 4;
    // this clousure has the Fn trait
    // if we write it like
    // let equal_to_x = move |z| z == x;
    // it changes to FnOnce as it takes the argument
    // useful when moving a clousure to another thread and the  data with it.
    let equal_to_x = |z| z == x;
    ley y = 4
    assert!(equal_to_x(y));
}


here the clousure knows x even if it was not passed as an argument, this could
not have been done with functions which know only what its passed and their own
scope.

although this produces an overhead, as the clousure is using memory to store
the values referenced.

clousures may make themselves with those variables in three ways, which are
associated with the Fn family traits.


take ownership => FnOnce, takes ownership of the variable bringing it into its
own scope, the once stands for it being able to do it only once.
borrowing mutably => FnMut, allows a change of env


By default all clousures implement the FnOnce
borrowing immutably => Fn, doenst allow cahnge of env


--- Iterators

iterators are lazy they do not nothing until called

iterators remove the hassle of having to use logic to iterate, they are an 
abstraction. iterators implement the Iterator trait.

the iterator must be held in a mutable variable mainly because the next method
changes the internal state the iterator uses to know where it stands. The next
method "consumes" the iterator, next returns an immutable reference to the 
item inside the iterator, we could change this replacing the .iter() call to
into_iter(), if we want to iter over mutable references we could do
iter_mut()  

the iterator trait comes with several different methods and those that reffer
to the next method are called consuming adaptors

e.g 

let v = vec![1, 2, 3];
let v_iter = v.iter();
let su: i32 = v_iter.sum();

assert_eq!(su, 6);

methods at the iterators trait that turn one iterator into another are called
iterator adaptors, but as they are all lazy you will need to use a consumer
to be able to use its values.


e.g 

let v1: Vec<i32> = vec![1, 2, 3];
v1.iter().map(|x| x+1);

this will produce nothing as iterators are lazy but if we add the collect method
that is a consumer method which gathers the values into a collection data type


let v2: Vec<i32> = v1.iter().map(...).collect();
assert_eq!(v2, vec![2, 3, 4]);


-- iterators + clousures that capture the env

this example uses filter, filter takes a clousure and evaluates each item in 
the iterator if the item returns true by the clousue then its considerated for
the iterator produced by filter.

#[derive(PartialEq, Debug)]
struct Shoe {
    size: u32,
    style: String
}

fn shoes_in_my_size(shoes: Vec<Shoe>, shoe_size: u32) -> Vec<Shoe> {
    shoes.into_iter()
        .filter(|s| s.size == shoe_size).collect()
}

< iterators can be made out of anything as long as they implement the 
Iterator trait>

e.g.

struct Counter {
    count: u32
}

impl Counter {
    fn new() -> Counter {
        Counter {count: 0}
    }
}

impl Iterator for Counter {
    // we set the associated Item type which will return u32 values.
    type Item = u32;
    fn next(&mut self) -> Option<Self::Item> {
        self.count += 1;
        if self.count < 6 {
            Some(self.count)
        } else {
            None
        }
    }
}

counter = Counter::new();

counter.next() -> will return a Some(x) where x is less than 6 1..2..3 ...
when it reaches 6 it will return the None type.

we can mix iterators results together

//skip 1 will avoid the number 1
fn using_other_iterator_trait_methods() {
    let sum: u32 = Counter::new().zip(Counter::new().skip(1))
        .map(|(a, b)| a * b).filter(|x| x % 3 == 0).sum();
}

so this zips two counters generating an iterator of tuples that have one elment
of each iterator, then mutiply the values in the tuple and filter those results
only those that divided by 3 produce no excess are then summed

1,2 = 2 not dividable
2,3 = 6
3,4 = 12
4,5 = 20 not dividable
what about 
5, None well rust knows that if zip produces a tuple where one of them is None
it should ignore it.

6 + 12 = 18 yey

-- Performance Iterator vs Loop

iterators are slightly more performant than loops, which is great! this is 
because iterators are part of Rust's zero-cost abstractions, which means it 
doesn't add overhead.

iterators with rust use unrolling which is an optimization for assembly code
instead of adding the overhead of the loop control it genreates repetitive code
for each iteration
