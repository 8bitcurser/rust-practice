21/4/20

Rust is a an ahead of time compiled language, this means you can give the 
compiled version to someone and they may run it even without having Rust
installed.


==================== CARGO ====================

[create a project using cargo]

>> cargo new test_project

cargo is the package manager from rust it also can build the code.


TOML (Toms obvious minimal language) is the format used by cargo config files.

Rust packages == Crates

[build project using cargo]

>> cargo build

(run inside the cargo project directory)

 Creates an executable at project_directory/target/debug/test_project
 can run executable as (inside project dir) ./target/debug/test_project

the build triggers also the generation of a file called Cargo.lock,
it just pins the exact dependencies.


[compile and run using cargo]

>> cargo run


[check code but not compile]

>> cargo check


If ready for release you can use 

>> cargo build --release 

This runs a bunch of optimizations, creates exe at 
project_directory/target/release

================================================

~~~~~~~~~~~~~~~~~~~~

- import sintax

use package::something;


- variable declaration

[Variables are inmutable by default in rust]

let mut name_of_varaible = something;

mut stands for mutable, if it wouldn't be placed we cant change the value
of it.


- calling associated functions of Types.

Type::associated_method() associated functions are equivalent to static methods


Mutable references are passed as &mut varirable name rather than &variable_name

- Result type

Rust has many different Result types a generic one and many specifics to each
module, library

Result types are enums, which means it has a fixed set of values that
are called "variants"
These variants are Ok and Err,

 Ok --> stands for successful operation
 Err --> provides info on why this failed.


 - formating prints

 they use the {} as place holders, we pass the variable not the reference
 of it.

 similar to python.


-------------------------------------------------------------------------
22/4/20


Cargo can provide docs on each one of the dependencies (crates) that we have
installed by doing
>> cargo doc --open 

which will display a website with all the docs for each crate

the html files are at project_directory/target/doc/project_name/index.html


---- match expression

its made of arms, each arm is made of a pattern and the code that should run if
the pattern is fulfilled.

the value passed to match is then compared to each one of its arms.


---- typing

Rust is strongly statically typed but it can infer the type of a variable as
int he case of doing 
let mut test = String::new();

we dont need to tell test is a string but as it has a string assigned it
must be a string.


for ints rust defaults to i32.

Other types are

- i32, u32(unsigned 32), i64.


assigning type to variable:

let test: u32 = 320;


---- shadowing variables

we can reuse varaible names by shadowing, this is commonly used to convert one
type into another

its declaring a new variable with the name using the previous value to
apply a transformation is not the same as making a mutable variable.

this is shadowing

let a = 1;
let a = a + 2;

This is not shadowing

let a;
a = a + 2; <= produces compile error


This is not shadowing

let mut a = 1;
a = a + 2; <= although similar a will remain being mutable while using
shadowing after transformation has been aplied the varaible is inmutable


---- looping

loop {
        // code
} 

generate an infinite loop that must be escaped with break keyword.


---- constants

const TEST: u32 = 100_000;

they wont change the value as we used the const keyword
